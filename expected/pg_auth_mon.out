create role auth_super with superuser login password 'postgres';
create role auth_nologin with password 'postgres';
create role auth_test with login password 'wrongpassword';
create role auth_to_be_deleted with login password 'foobar';
create role auth_to_be_renamed with login password 'postgres';
create role role_to_check_logging with superuser login password 'postgres';
create database testdb;
create extension pg_auth_mon version '1.0';
--1.Successful Login attempt
\! PGPASSWORD=postgres psql -X -U auth_super -d testdb -c "select 1"
 ?column? 
----------
        1
(1 row)

select rolname, successful_attempts, total_hba_conflicts, other_auth_failures from pg_auth_mon where rolname like 'auth_%';
  rolname   | successful_attempts | total_hba_conflicts | other_auth_failures 
------------+---------------------+---------------------+---------------------
 auth_super |                   1 |                   0 |                   0
(1 row)

--2.Login attempt by invalid username
\! PGPASSWORD=postgres psql -X -U auth_blah -d testdb  -c "select 1" 2>&1 | sed 's/^.* FATAL: */FATAL: /'
FATAL: password authentication failed for user "auth_blah"
select rolname, uid, successful_attempts, total_hba_conflicts, other_auth_failures from pg_auth_mon where uid = 0;
 rolname | uid | successful_attempts | total_hba_conflicts | other_auth_failures 
---------+-----+---------------------+---------------------+---------------------
         |   0 |                   0 |                   0 |                   1
(1 row)

--3.Login attempt by username who is not allowed to login is not authentication failure
\! PGPASSWORD=postgres psql -X -U auth_nologin -d testdb -c "select 1" 2>&1 | sed 's/^.* FATAL: */FATAL: /'
FATAL: role "auth_nologin" is not permitted to log in
select rolname, successful_attempts, total_hba_conflicts, other_auth_failures from pg_auth_mon where rolname like 'auth_%' order by rolname;
   rolname    | successful_attempts | total_hba_conflicts | other_auth_failures 
--------------+---------------------+---------------------+---------------------
 auth_nologin |                   1 |                   0 |                   0
 auth_super   |                   1 |                   0 |                   0
(2 rows)

--4.Login attempt by a valid user with a wrong password 
\! PGPASSWORD=postgres psql -X -U auth_test -d testdb -c "select 1" 2>&1 | sed 's/^.* FATAL: */FATAL: /'
FATAL: password authentication failed for user "auth_test"
select rolname, successful_attempts, total_hba_conflicts, other_auth_failures from pg_auth_mon where rolname like 'auth_%' order by rolname;
   rolname    | successful_attempts | total_hba_conflicts | other_auth_failures 
--------------+---------------------+---------------------+---------------------
 auth_nologin |                   1 |                   0 |                   0
 auth_super   |                   1 |                   0 |                   0
 auth_test    |                   0 |                   0 |                   1
(3 rows)

--5. Test upgrade to version '1.1'
alter extension pg_auth_mon update to '1.1';
select extversion from pg_extension where extname = 'pg_auth_mon';
 extversion 
------------
 1.1
(1 row)

-- ensure the data from the previous version is still accessible
select rolname, successful_attempts, total_hba_conflicts, other_auth_failures from pg_auth_mon where rolname like 'auth_%' order by rolname;
   rolname    | successful_attempts | total_hba_conflicts | other_auth_failures 
--------------+---------------------+---------------------+---------------------
 auth_nologin |                   1 |                   0 |                   0
 auth_super   |                   1 |                   0 |                   0
 auth_test    |                   0 |                   0 |                   1
(3 rows)

--6. Rolname is not empty for deleted users
\! PGPASSWORD=foobar psql -X -U auth_to_be_deleted -d testdb -c "select 1"
 ?column? 
----------
        1
(1 row)

drop role auth_to_be_deleted;
select rolname, successful_attempts, total_hba_conflicts, other_auth_failures from pg_auth_mon where rolname like 'auth_%' order by rolname;
      rolname       | successful_attempts | total_hba_conflicts | other_auth_failures 
--------------------+---------------------+---------------------+---------------------
 auth_nologin       |                   1 |                   0 |                   0
 auth_super         |                   1 |                   0 |                   0
 auth_test          |                   0 |                   0 |                   1
 auth_to_be_deleted |                   1 |                   0 |                   0
(4 rows)

--7. The rolname at the last login attempt (not the initial one) is shown when a role is renamed before deletion
\! PGPASSWORD=postgres psql -X -U auth_to_be_renamed -d testdb -c "select 1"
 ?column? 
----------
        1
(1 row)

alter role auth_to_be_renamed rename to auth_renamed;
NOTICE:  MD5 password cleared because of role rename
alter role auth_renamed with password 'postgres';
\! PGPASSWORD=postgres psql -X -U auth_renamed -d testdb -c "select 1"
 ?column? 
----------
        1
(1 row)

drop role auth_renamed;
select rolname, successful_attempts, total_hba_conflicts, other_auth_failures from pg_auth_mon where rolname like 'auth_%' order by rolname;
      rolname       | successful_attempts | total_hba_conflicts | other_auth_failures 
--------------------+---------------------+---------------------+---------------------
 auth_nologin       |                   1 |                   0 |                   0
 auth_renamed       |                   2 |                   0 |                   0
 auth_super         |                   1 |                   0 |                   0
 auth_test          |                   0 |                   0 |                   1
 auth_to_be_deleted |                   1 |                   0 |                   0
(5 rows)

--8. Check if the amount of log entries for the log-in attempts done in the previous test cases is correct.
-- auth_to_be_renamed and auth_renamed have the same oid, and pg_auth_mon aggregates based on oids
-- hence 2 succesfful login attempts for auth_renamed in the previous test
\! PGPASSWORD=postgres psql -X -U role_to_check_logging -h 127.0.0.1 -d postgres -c "select user_name, count(*) as ct from public.postgres_log where position('connection authorized' in message) > 0 and user_name like 'auth%' group by user_name order by ct desc;"
     user_name      | ct 
--------------------+----
 auth_nologin       |  1
 auth_renamed       |  1
 auth_super         |  1
 auth_to_be_deleted |  1
 auth_to_be_renamed |  1
(5 rows)

--9. Successful logins are logged with and without SSL
-- regexp removes ports and pg_hba line numbers
\! PGPASSWORD=postgres PGSSLMODE=require psql -X -t -A -U auth_super -h 127.0.0.1 -d postgres -c "SELECT regexp_replace( message, ':\d{1,5}', ':', 'g' ) from public.postgres_log where message like '%auth\_super%';"
connection authorized: [local]: user=auth_super database=testdb APPLICATION_NAME_PLACEHOLDER (PGHBA_PLACEHOLDER:) IDENTITY_PLACEHOLDER method=md5
connection authorized: 127.0.0.1: user=auth_super database=postgres APPLICATION_NAME_PLACEHOLDER (PGHBA_PLACEHOLDER:) SSL enabled (protocol=TLSv1.3, cipher=TLS_AES_256_GCM_SHA384, SSL_PLACEHOLDER) IDENTITY_PLACEHOLDER method=md5
--Cleanup
drop role auth_nologin;
drop role auth_test;
drop role auth_super;
drop role role_to_check_logging;
drop database testdb;
